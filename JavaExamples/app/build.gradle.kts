/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

open class SystemProcess: DefaultTask() {
    @Internal lateinit var command: String
    @Internal lateinit var workingDir: String
    @Internal lateinit var arguments: List<String>
    @Internal var projectDir: File = project.projectDir
 
    @TaskAction
    fun runCommand() {
        val res = (command + " " + arguments.joinToString(" ")).runCommand(workingDir)
        print(res)
    }
 
    private fun String.runCommand(workingDirStr: String): String? {
        return try {
            val workingDir = File(projectDir, workingDirStr)
            val parts = this.split("\\s".toRegex())
            val proc = ProcessBuilder(*parts.toTypedArray())
                    .directory(workingDir)
                    .redirectOutput(ProcessBuilder.Redirect.PIPE)
                    .redirectError(ProcessBuilder.Redirect.PIPE)
                    .start()
 
            proc.waitFor(60, TimeUnit.MINUTES)
            proc.inputStream.bufferedReader().readText()
        } catch(e: Exception) {
            e.printStackTrace()
            null
        }
    }
}

open class Javap: DefaultTask() {
    @Internal lateinit var workingDir: String
    @Internal lateinit var classFile: String
    @Internal lateinit var javapArguments: List<String>
    @Internal var projectDir = project.projectDir

    @TaskAction
    fun runCommand() {
        val cl = ("javap " + javapArguments.joinToString(" ") + " " + classFile)
        println("Executing: " + cl)
        val res = cl.runCommand(workingDir)
        println(res)
    }
    private fun String.runCommand(workingDirStr: String): String? {
        return try {
            val workingDir = File(projectDir, workingDirStr)
            val parts = this.split("\\s".toRegex())
            val proc = ProcessBuilder(*parts.toTypedArray())
                    .directory(workingDir)
                    .redirectOutput(ProcessBuilder.Redirect.PIPE)
                    .redirectError(ProcessBuilder.Redirect.PIPE)
                    .start()
 
            proc.waitFor(60, TimeUnit.MINUTES)
            proc.inputStream.bufferedReader().readText()
        } catch(e: Exception) {
            e.printStackTrace()
            null
        }
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation(libs.junit)

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.newardassociates.demo.App"
}

tasks.register<SystemProcess>("disassemble") {
    group = "build"
    description = "Produce listings of disassembled classes"
    command = "javap"
    workingDir =  "./build/classes/java/main"
    arguments = listOf("-v", "com/newardassociates/demo/App.class")
    dependsOn("compileJava")
}
tasks.register<Javap>("disasm") {
    group = "build"
    description = "Produce listings of disassembled classes"
    workingDir =  "./build/classes/java/main"
    javapArguments = listOf("-v")
    classFile = "com/newardassociates/demo/App.class"
    dependsOn("compileJava")
}
